// This file was generated by gir (https://github.com/gtk-rs/gir @ 5ec9961)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use MapTrack;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct MapPolygon(Object<ffi::OsmGpsMapPolygon, ffi::OsmGpsMapPolygonClass>);

    match fn {
        get_type => || ffi::osm_gps_map_polygon_get_type(),
    }
}

impl MapPolygon {
    pub fn new() -> MapPolygon {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osm_gps_map_polygon_new())
        }
    }
}

impl Default for MapPolygon {
    fn default() -> Self {
        Self::new()
    }
}

pub trait MapPolygonExt {
    fn get_track(&self) -> Option<MapTrack>;

    fn get_property_breakable(&self) -> bool;

    fn set_property_breakable(&self, breakable: bool);

    fn get_property_editable(&self) -> bool;

    fn set_property_editable(&self, editable: bool);

    fn get_property_shade_alpha(&self) -> f32;

    fn set_property_shade_alpha(&self, shade_alpha: f32);

    fn get_property_shaded(&self) -> bool;

    fn set_property_shaded(&self, shaded: bool);

    //fn set_property_track(&self, track: /*Unimplemented*/Fundamental: Pointer);

    fn get_property_visible(&self) -> bool;

    fn set_property_visible(&self, visible: bool);

    fn connect_property_breakable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_shade_alpha_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_shaded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_track_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<MapPolygon> + IsA<glib::object::Object>> MapPolygonExt for O {
    fn get_track(&self) -> Option<MapTrack> {
        unsafe {
            from_glib_none(ffi::osm_gps_map_polygon_get_track(self.to_glib_none().0))
        }
    }

    fn get_property_breakable(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "breakable".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_breakable(&self, breakable: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "breakable".to_glib_none().0, Value::from(&breakable).to_glib_none().0);
        }
    }

    fn get_property_editable(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "editable".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_editable(&self, editable: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "editable".to_glib_none().0, Value::from(&editable).to_glib_none().0);
        }
    }

    fn get_property_shade_alpha(&self) -> f32 {
        unsafe {
            let mut value = Value::from_type(<f32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "shade-alpha".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_shade_alpha(&self, shade_alpha: f32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "shade-alpha".to_glib_none().0, Value::from(&shade_alpha).to_glib_none().0);
        }
    }

    fn get_property_shaded(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "shaded".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_shaded(&self, shaded: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "shaded".to_glib_none().0, Value::from(&shaded).to_glib_none().0);
        }
    }

    //fn set_property_track(&self, track: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0, "track".to_glib_none().0, Value::from(&track).to_glib_none().0);
    //    }
    //}

    fn get_property_visible(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "visible".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_visible(&self, visible: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "visible".to_glib_none().0, Value::from(&visible).to_glib_none().0);
        }
    }

    fn connect_property_breakable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::breakable",
                transmute(notify_breakable_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::editable",
                transmute(notify_editable_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_shade_alpha_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::shade-alpha",
                transmute(notify_shade_alpha_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_shaded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::shaded",
                transmute(notify_shaded_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_track_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::track",
                transmute(notify_track_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::visible",
                transmute(notify_visible_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_breakable_trampoline<P>(this: *mut ffi::OsmGpsMapPolygon, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapPolygon> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapPolygon::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_editable_trampoline<P>(this: *mut ffi::OsmGpsMapPolygon, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapPolygon> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapPolygon::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_shade_alpha_trampoline<P>(this: *mut ffi::OsmGpsMapPolygon, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapPolygon> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapPolygon::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_shaded_trampoline<P>(this: *mut ffi::OsmGpsMapPolygon, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapPolygon> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapPolygon::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_track_trampoline<P>(this: *mut ffi::OsmGpsMapPolygon, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapPolygon> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapPolygon::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_visible_trampoline<P>(this: *mut ffi::OsmGpsMapPolygon, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapPolygon> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapPolygon::from_glib_borrow(this).downcast_unchecked())
}
