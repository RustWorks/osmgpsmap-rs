// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::MapTrack;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::glib_wrapper! {
    pub struct MapPolygon(Object<ffi::OsmGpsMapPolygon, ffi::OsmGpsMapPolygonClass>);

    match fn {
        get_type => || ffi::osm_gps_map_polygon_get_type(),
    }
}

impl MapPolygon {
    pub fn new() -> MapPolygon {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osm_gps_map_polygon_new())
        }
    }
}

impl Default for MapPolygon {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_MAP_POLYGON: Option<&MapPolygon> = None;

pub trait MapPolygonExt: 'static {
    fn get_track(&self) -> Option<MapTrack>;

    fn get_property_breakable(&self) -> bool;

    fn set_property_breakable(&self, breakable: bool);

    fn get_property_editable(&self) -> bool;

    fn set_property_editable(&self, editable: bool);

    fn get_property_shade_alpha(&self) -> f32;

    fn set_property_shade_alpha(&self, shade_alpha: f32);

    fn get_property_shaded(&self) -> bool;

    fn set_property_shaded(&self, shaded: bool);

    //fn set_property_track(&self, track: /*Unimplemented*/Fundamental: Pointer);

    fn get_property_visible(&self) -> bool;

    fn set_property_visible(&self, visible: bool);

    fn connect_property_breakable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_shade_alpha_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_shaded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_track_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<MapPolygon>> MapPolygonExt for O {
    fn get_track(&self) -> Option<MapTrack> {
        unsafe {
            from_glib_none(ffi::osm_gps_map_polygon_get_track(self.as_ref().to_glib_none().0))
        }
    }

    fn get_property_breakable(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"breakable\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `breakable` getter").unwrap()
        }
    }

    fn set_property_breakable(&self, breakable: bool) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"breakable\0".as_ptr() as *const _, Value::from(&breakable).to_glib_none().0);
        }
    }

    fn get_property_editable(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"editable\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `editable` getter").unwrap()
        }
    }

    fn set_property_editable(&self, editable: bool) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"editable\0".as_ptr() as *const _, Value::from(&editable).to_glib_none().0);
        }
    }

    fn get_property_shade_alpha(&self) -> f32 {
        unsafe {
            let mut value = Value::from_type(<f32 as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"shade-alpha\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `shade-alpha` getter").unwrap()
        }
    }

    fn set_property_shade_alpha(&self, shade_alpha: f32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"shade-alpha\0".as_ptr() as *const _, Value::from(&shade_alpha).to_glib_none().0);
        }
    }

    fn get_property_shaded(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"shaded\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `shaded` getter").unwrap()
        }
    }

    fn set_property_shaded(&self, shaded: bool) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"shaded\0".as_ptr() as *const _, Value::from(&shaded).to_glib_none().0);
        }
    }

    //fn set_property_track(&self, track: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe {
    //        glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"track\0".as_ptr() as *const _, Value::from(&track).to_glib_none().0);
    //    }
    //}

    fn get_property_visible(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"visible\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `visible` getter").unwrap()
        }
    }

    fn set_property_visible(&self, visible: bool) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"visible\0".as_ptr() as *const _, Value::from(&visible).to_glib_none().0);
        }
    }

    fn connect_property_breakable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_breakable_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapPolygon, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapPolygon>
        {
            let f: &F = &*(f as *const F);
            f(&MapPolygon::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::breakable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_breakable_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_editable_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapPolygon, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapPolygon>
        {
            let f: &F = &*(f as *const F);
            f(&MapPolygon::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::editable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_editable_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_shade_alpha_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_shade_alpha_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapPolygon, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapPolygon>
        {
            let f: &F = &*(f as *const F);
            f(&MapPolygon::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::shade-alpha\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_shade_alpha_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_shaded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_shaded_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapPolygon, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapPolygon>
        {
            let f: &F = &*(f as *const F);
            f(&MapPolygon::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::shaded\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_shaded_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_track_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_track_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapPolygon, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapPolygon>
        {
            let f: &F = &*(f as *const F);
            f(&MapPolygon::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::track\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_track_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_visible_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapPolygon, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapPolygon>
        {
            let f: &F = &*(f as *const F);
            f(&MapPolygon::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::visible\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_visible_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for MapPolygon {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "MapPolygon")
    }
}
