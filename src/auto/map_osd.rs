// This file was generated by gir (https://github.com/gtk-rs/gir @ bdc4404)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use MapLayer;
use ffi;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct MapOsd(Object<ffi::OsmGpsMapOsd, ffi::OsmGpsMapOsdClass>): MapLayer;

    match fn {
        get_type => || ffi::osm_gps_map_osd_get_type(),
    }
}

impl MapOsd {
    pub fn new() -> MapOsd {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osm_gps_map_osd_new())
        }
    }
}

impl Default for MapOsd {
    fn default() -> Self {
        Self::new()
    }
}

pub trait MapOsdExt: 'static {
    fn get_property_dpad_radius(&self) -> u32;

    fn set_property_dpad_radius(&self, dpad_radius: u32);

    fn get_property_osd_x(&self) -> i32;

    fn set_property_osd_x(&self, osd_x: i32);

    fn get_property_osd_y(&self) -> i32;

    fn set_property_osd_y(&self, osd_y: i32);

    fn get_property_show_coordinates(&self) -> bool;

    fn set_property_show_coordinates(&self, show_coordinates: bool);

    fn get_property_show_copyright(&self) -> bool;

    fn set_property_show_copyright(&self, show_copyright: bool);

    fn get_property_show_crosshair(&self) -> bool;

    fn set_property_show_crosshair(&self, show_crosshair: bool);

    fn get_property_show_dpad(&self) -> bool;

    fn set_property_show_dpad(&self, show_dpad: bool);

    fn get_property_show_gps_in_dpad(&self) -> bool;

    fn set_property_show_gps_in_dpad(&self, show_gps_in_dpad: bool);

    fn get_property_show_gps_in_zoom(&self) -> bool;

    fn set_property_show_gps_in_zoom(&self, show_gps_in_zoom: bool);

    fn get_property_show_scale(&self) -> bool;

    fn set_property_show_scale(&self, show_scale: bool);

    fn get_property_show_zoom(&self) -> bool;

    fn set_property_show_zoom(&self, show_zoom: bool);

    fn connect_property_dpad_radius_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_osd_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_osd_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_show_coordinates_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_show_copyright_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_show_crosshair_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_show_dpad_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_show_gps_in_dpad_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_show_gps_in_zoom_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_show_scale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_show_zoom_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: 'static + IsA<MapOsd>> MapOsdExt for O {
    fn get_property_dpad_radius(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bdpad-radius\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_dpad_radius(&self, dpad_radius: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bdpad-radius\0".as_ptr() as *const _, Value::from(&dpad_radius).to_glib_none().0);
        }
    }

    fn get_property_osd_x(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bosd-x\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_osd_x(&self, osd_x: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bosd-x\0".as_ptr() as *const _, Value::from(&osd_x).to_glib_none().0);
        }
    }

    fn get_property_osd_y(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bosd-y\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_osd_y(&self, osd_y: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bosd-y\0".as_ptr() as *const _, Value::from(&osd_y).to_glib_none().0);
        }
    }

    fn get_property_show_coordinates(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bshow-coordinates\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_show_coordinates(&self, show_coordinates: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bshow-coordinates\0".as_ptr() as *const _, Value::from(&show_coordinates).to_glib_none().0);
        }
    }

    fn get_property_show_copyright(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bshow-copyright\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_show_copyright(&self, show_copyright: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bshow-copyright\0".as_ptr() as *const _, Value::from(&show_copyright).to_glib_none().0);
        }
    }

    fn get_property_show_crosshair(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bshow-crosshair\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_show_crosshair(&self, show_crosshair: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bshow-crosshair\0".as_ptr() as *const _, Value::from(&show_crosshair).to_glib_none().0);
        }
    }

    fn get_property_show_dpad(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bshow-dpad\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_show_dpad(&self, show_dpad: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bshow-dpad\0".as_ptr() as *const _, Value::from(&show_dpad).to_glib_none().0);
        }
    }

    fn get_property_show_gps_in_dpad(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bshow-gps-in-dpad\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_show_gps_in_dpad(&self, show_gps_in_dpad: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bshow-gps-in-dpad\0".as_ptr() as *const _, Value::from(&show_gps_in_dpad).to_glib_none().0);
        }
    }

    fn get_property_show_gps_in_zoom(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bshow-gps-in-zoom\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_show_gps_in_zoom(&self, show_gps_in_zoom: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bshow-gps-in-zoom\0".as_ptr() as *const _, Value::from(&show_gps_in_zoom).to_glib_none().0);
        }
    }

    fn get_property_show_scale(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bshow-scale\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_show_scale(&self, show_scale: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bshow-scale\0".as_ptr() as *const _, Value::from(&show_scale).to_glib_none().0);
        }
    }

    fn get_property_show_zoom(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bshow-zoom\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_show_zoom(&self, show_zoom: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, "bshow-zoom\0".as_ptr() as *const _, Value::from(&show_zoom).to_glib_none().0);
        }
    }

    fn connect_property_dpad_radius_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0 as *mut _, "notify::dpad-radius",
                transmute(notify_dpad_radius_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_osd_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0 as *mut _, "notify::osd-x",
                transmute(notify_osd_x_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_osd_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0 as *mut _, "notify::osd-y",
                transmute(notify_osd_y_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_show_coordinates_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0 as *mut _, "notify::show-coordinates",
                transmute(notify_show_coordinates_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_show_copyright_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0 as *mut _, "notify::show-copyright",
                transmute(notify_show_copyright_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_show_crosshair_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0 as *mut _, "notify::show-crosshair",
                transmute(notify_show_crosshair_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_show_dpad_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0 as *mut _, "notify::show-dpad",
                transmute(notify_show_dpad_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_show_gps_in_dpad_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0 as *mut _, "notify::show-gps-in-dpad",
                transmute(notify_show_gps_in_dpad_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_show_gps_in_zoom_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0 as *mut _, "notify::show-gps-in-zoom",
                transmute(notify_show_gps_in_zoom_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_show_scale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0 as *mut _, "notify::show-scale",
                transmute(notify_show_scale_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_show_zoom_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0 as *mut _, "notify::show-zoom",
                transmute(notify_show_zoom_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_dpad_radius_trampoline<P>(this: *mut ffi::OsmGpsMapOsd, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapOsd> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapOsd::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_osd_x_trampoline<P>(this: *mut ffi::OsmGpsMapOsd, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapOsd> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapOsd::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_osd_y_trampoline<P>(this: *mut ffi::OsmGpsMapOsd, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapOsd> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapOsd::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_show_coordinates_trampoline<P>(this: *mut ffi::OsmGpsMapOsd, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapOsd> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapOsd::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_show_copyright_trampoline<P>(this: *mut ffi::OsmGpsMapOsd, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapOsd> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapOsd::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_show_crosshair_trampoline<P>(this: *mut ffi::OsmGpsMapOsd, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapOsd> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapOsd::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_show_dpad_trampoline<P>(this: *mut ffi::OsmGpsMapOsd, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapOsd> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapOsd::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_show_gps_in_dpad_trampoline<P>(this: *mut ffi::OsmGpsMapOsd, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapOsd> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapOsd::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_show_gps_in_zoom_trampoline<P>(this: *mut ffi::OsmGpsMapOsd, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapOsd> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapOsd::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_show_scale_trampoline<P>(this: *mut ffi::OsmGpsMapOsd, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapOsd> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapOsd::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_show_zoom_trampoline<P>(this: *mut ffi::OsmGpsMapOsd, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapOsd> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapOsd::from_glib_borrow(this).downcast_unchecked())
}

impl fmt::Display for MapOsd {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "MapOsd")
    }
}
