// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::MapPoint;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::glib_wrapper! {
    pub struct MapTrack(Object<ffi::OsmGpsMapTrack, ffi::OsmGpsMapTrackClass>);

    match fn {
        get_type => || ffi::osm_gps_map_track_get_type(),
    }
}

impl MapTrack {
    pub fn new() -> MapTrack {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osm_gps_map_track_new())
        }
    }
}

impl Default for MapTrack {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_MAP_TRACK: Option<&MapTrack> = None;

pub trait MapTrackExt: 'static {
    //fn add_point(&self, point: &MapPoint);

    fn get_color(&self, color: &mut gdk::RGBA);

    fn get_length(&self) -> f64;

    fn get_point(&self, pos: i32) -> Option<MapPoint>;

    fn get_points(&self) -> Vec<MapPoint>;

    fn insert_point(&self, np: &mut MapPoint, pos: i32);

    fn n_points(&self) -> i32;

    fn remove_point(&self, pos: i32);

    fn set_color(&self, color: &mut gdk::RGBA);

    fn get_property_alpha(&self) -> f32;

    fn set_property_alpha(&self, alpha: f32);

    fn get_property_editable(&self) -> bool;

    fn set_property_editable(&self, editable: bool);

    fn get_property_line_width(&self) -> f32;

    fn set_property_line_width(&self, line_width: f32);

    //fn get_property_track(&self) -> /*Unimplemented*/Fundamental: Pointer;

    fn get_property_visible(&self) -> bool;

    fn set_property_visible(&self, visible: bool);

    fn connect_point_added<F: Fn(&Self, &MapPoint) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_point_changed<F: Fn(&Self, i32) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_point_inserted<F: Fn(&Self, i32) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_point_removed<F: Fn(&Self, i32) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_alpha_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_line_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<MapTrack>> MapTrackExt for O {
    //fn add_point(&self, point: &MapPoint) {
    //    unsafe { TODO: call ffi:osm_gps_map_track_add_point() }
    //}

    fn get_color(&self, color: &mut gdk::RGBA) {
        unsafe {
            ffi::osm_gps_map_track_get_color(self.as_ref().to_glib_none().0, color.to_glib_none_mut().0);
        }
    }

    fn get_length(&self) -> f64 {
        unsafe {
            ffi::osm_gps_map_track_get_length(self.as_ref().to_glib_none().0)
        }
    }

    fn get_point(&self, pos: i32) -> Option<MapPoint> {
        unsafe {
            from_glib_full(ffi::osm_gps_map_track_get_point(self.as_ref().to_glib_none().0, pos))
        }
    }

    fn get_points(&self) -> Vec<MapPoint> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::osm_gps_map_track_get_points(self.as_ref().to_glib_none().0))
        }
    }

    fn insert_point(&self, np: &mut MapPoint, pos: i32) {
        unsafe {
            ffi::osm_gps_map_track_insert_point(self.as_ref().to_glib_none().0, np.to_glib_none_mut().0, pos);
        }
    }

    fn n_points(&self) -> i32 {
        unsafe {
            ffi::osm_gps_map_track_n_points(self.as_ref().to_glib_none().0)
        }
    }

    fn remove_point(&self, pos: i32) {
        unsafe {
            ffi::osm_gps_map_track_remove_point(self.as_ref().to_glib_none().0, pos);
        }
    }

    fn set_color(&self, color: &mut gdk::RGBA) {
        unsafe {
            ffi::osm_gps_map_track_set_color(self.as_ref().to_glib_none().0, color.to_glib_none_mut().0);
        }
    }

    fn get_property_alpha(&self) -> f32 {
        unsafe {
            let mut value = Value::from_type(<f32 as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"alpha\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `alpha` getter").unwrap()
        }
    }

    fn set_property_alpha(&self, alpha: f32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"alpha\0".as_ptr() as *const _, Value::from(&alpha).to_glib_none().0);
        }
    }

    fn get_property_editable(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"editable\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `editable` getter").unwrap()
        }
    }

    fn set_property_editable(&self, editable: bool) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"editable\0".as_ptr() as *const _, Value::from(&editable).to_glib_none().0);
        }
    }

    fn get_property_line_width(&self) -> f32 {
        unsafe {
            let mut value = Value::from_type(<f32 as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"line-width\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `line-width` getter").unwrap()
        }
    }

    fn set_property_line_width(&self, line_width: f32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"line-width\0".as_ptr() as *const _, Value::from(&line_width).to_glib_none().0);
        }
    }

    //fn get_property_track(&self) -> /*Unimplemented*/Fundamental: Pointer {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"track\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `track` getter").unwrap()
    //    }
    //}

    fn get_property_visible(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"visible\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `visible` getter").unwrap()
        }
    }

    fn set_property_visible(&self, visible: bool) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"visible\0".as_ptr() as *const _, Value::from(&visible).to_glib_none().0);
        }
    }

    fn connect_point_added<F: Fn(&Self, &MapPoint) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn point_added_trampoline<P, F: Fn(&P, &MapPoint) + 'static>(this: *mut ffi::OsmGpsMapTrack, arg1: *mut ffi::OsmGpsMapPoint, f: glib::ffi::gpointer)
            where P: IsA<MapTrack>
        {
            let f: &F = &*(f as *const F);
            f(&MapTrack::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(arg1))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"point-added\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(point_added_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_point_changed<F: Fn(&Self, i32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn point_changed_trampoline<P, F: Fn(&P, i32) + 'static>(this: *mut ffi::OsmGpsMapTrack, object: libc::c_int, f: glib::ffi::gpointer)
            where P: IsA<MapTrack>
        {
            let f: &F = &*(f as *const F);
            f(&MapTrack::from_glib_borrow(this).unsafe_cast_ref(), object)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"point-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(point_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_point_inserted<F: Fn(&Self, i32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn point_inserted_trampoline<P, F: Fn(&P, i32) + 'static>(this: *mut ffi::OsmGpsMapTrack, object: libc::c_int, f: glib::ffi::gpointer)
            where P: IsA<MapTrack>
        {
            let f: &F = &*(f as *const F);
            f(&MapTrack::from_glib_borrow(this).unsafe_cast_ref(), object)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"point-inserted\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(point_inserted_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_point_removed<F: Fn(&Self, i32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn point_removed_trampoline<P, F: Fn(&P, i32) + 'static>(this: *mut ffi::OsmGpsMapTrack, object: libc::c_int, f: glib::ffi::gpointer)
            where P: IsA<MapTrack>
        {
            let f: &F = &*(f as *const F);
            f(&MapTrack::from_glib_borrow(this).unsafe_cast_ref(), object)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"point-removed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(point_removed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_alpha_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_alpha_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapTrack, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapTrack>
        {
            let f: &F = &*(f as *const F);
            f(&MapTrack::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::alpha\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_alpha_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_color_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapTrack, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapTrack>
        {
            let f: &F = &*(f as *const F);
            f(&MapTrack::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::color\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_color_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_editable_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapTrack, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapTrack>
        {
            let f: &F = &*(f as *const F);
            f(&MapTrack::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::editable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_editable_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_line_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_line_width_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapTrack, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapTrack>
        {
            let f: &F = &*(f as *const F);
            f(&MapTrack::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::line-width\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_line_width_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_visible_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapTrack, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapTrack>
        {
            let f: &F = &*(f as *const F);
            f(&MapTrack::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::visible\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_visible_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for MapTrack {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "MapTrack")
    }
}
