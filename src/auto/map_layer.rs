// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use cairo;
use gdk;
use glib::object::IsA;
use glib::translate::*;
use osm_gps_map_sys;
use std::fmt;
use Map;

glib_wrapper! {
    pub struct MapLayer(Interface<osm_gps_map_sys::OsmGpsMapLayer>);

    match fn {
        get_type => || osm_gps_map_sys::osm_gps_map_layer_get_type(),
    }
}

pub const NONE_MAP_LAYER: Option<&MapLayer> = None;

pub trait MapLayerExt: 'static {
    fn busy(&self) -> bool;

    fn button_press<P: IsA<Map>>(&self, map: &P, event: &gdk::EventButton) -> bool;

    fn draw<P: IsA<Map>>(&self, map: &P, cr: &cairo::Context);

    fn render<P: IsA<Map>>(&self, map: &P);
}

impl<O: IsA<MapLayer>> MapLayerExt for O {
    fn busy(&self) -> bool {
        unsafe {
            from_glib(osm_gps_map_sys::osm_gps_map_layer_busy(self.as_ref().to_glib_none().0))
        }
    }

    fn button_press<P: IsA<Map>>(&self, map: &P, event: &gdk::EventButton) -> bool {
        unsafe {
            from_glib(osm_gps_map_sys::osm_gps_map_layer_button_press(self.as_ref().to_glib_none().0, map.as_ref().to_glib_none().0, mut_override(event.to_glib_none().0)))
        }
    }

    fn draw<P: IsA<Map>>(&self, map: &P, cr: &cairo::Context) {
        unsafe {
            osm_gps_map_sys::osm_gps_map_layer_draw(self.as_ref().to_glib_none().0, map.as_ref().to_glib_none().0, mut_override(cr.to_glib_none().0));
        }
    }

    fn render<P: IsA<Map>>(&self, map: &P) {
        unsafe {
            osm_gps_map_sys::osm_gps_map_layer_render(self.as_ref().to_glib_none().0, map.as_ref().to_glib_none().0);
        }
    }
}

impl fmt::Display for MapLayer {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "MapLayer")
    }
}
