// This file was generated by gir (https://github.com/gtk-rs/gir @ 5ec9961)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use Map;
use cairo;
use ffi;
use gdk;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct MapLayer(Object<ffi::OsmGpsMapLayer, ffi::OsmGpsMapLayerIface>);

    match fn {
        get_type => || ffi::osm_gps_map_layer_get_type(),
    }
}

pub trait MapLayerExt {
    fn busy(&self) -> bool;

    fn button_press(&self, map: &Map, event: &gdk::EventButton) -> bool;

    fn draw(&self, map: &Map, cr: &cairo::Context);

    fn render(&self, map: &Map);
}

impl<O: IsA<MapLayer>> MapLayerExt for O {
    fn busy(&self) -> bool {
        unsafe {
            from_glib(ffi::osm_gps_map_layer_busy(self.to_glib_none().0))
        }
    }

    fn button_press(&self, map: &Map, event: &gdk::EventButton) -> bool {
        unsafe {
            from_glib(ffi::osm_gps_map_layer_button_press(self.to_glib_none().0, map.to_glib_none().0, mut_override(event.to_glib_none().0)))
        }
    }

    fn draw(&self, map: &Map, cr: &cairo::Context) {
        unsafe {
            ffi::osm_gps_map_layer_draw(self.to_glib_none().0, map.to_glib_none().0, mut_override(cr.to_glib_none().0));
        }
    }

    fn render(&self, map: &Map) {
        unsafe {
            ffi::osm_gps_map_layer_render(self.to_glib_none().0, map.to_glib_none().0);
        }
    }
}
