// This file was generated by gir (https://github.com/gtk-rs/gir @ 7d51043+)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use glib::translate::*;
use osm_gps_map_sys;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum MapKey_t {
    Fullscreen,
    Zoomin,
    Zoomout,
    Up,
    Down,
    Left,
    Right,
    Max,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for MapKey_t {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "MapKey_t::{}", match *self {
            MapKey_t::Fullscreen => "Fullscreen",
            MapKey_t::Zoomin => "Zoomin",
            MapKey_t::Zoomout => "Zoomout",
            MapKey_t::Up => "Up",
            MapKey_t::Down => "Down",
            MapKey_t::Left => "Left",
            MapKey_t::Right => "Right",
            MapKey_t::Max => "Max",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for MapKey_t {
    type GlibType = osm_gps_map_sys::OsmGpsMapKey_t;

    fn to_glib(&self) -> osm_gps_map_sys::OsmGpsMapKey_t {
        match *self {
            MapKey_t::Fullscreen => osm_gps_map_sys::OSM_GPS_MAP_KEY_FULLSCREEN,
            MapKey_t::Zoomin => osm_gps_map_sys::OSM_GPS_MAP_KEY_ZOOMIN,
            MapKey_t::Zoomout => osm_gps_map_sys::OSM_GPS_MAP_KEY_ZOOMOUT,
            MapKey_t::Up => osm_gps_map_sys::OSM_GPS_MAP_KEY_UP,
            MapKey_t::Down => osm_gps_map_sys::OSM_GPS_MAP_KEY_DOWN,
            MapKey_t::Left => osm_gps_map_sys::OSM_GPS_MAP_KEY_LEFT,
            MapKey_t::Right => osm_gps_map_sys::OSM_GPS_MAP_KEY_RIGHT,
            MapKey_t::Max => osm_gps_map_sys::OSM_GPS_MAP_KEY_MAX,
            MapKey_t::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<osm_gps_map_sys::OsmGpsMapKey_t> for MapKey_t {
    fn from_glib(value: osm_gps_map_sys::OsmGpsMapKey_t) -> Self {
        skip_assert_initialized!();
        match value {
            0 => MapKey_t::Fullscreen,
            1 => MapKey_t::Zoomin,
            2 => MapKey_t::Zoomout,
            3 => MapKey_t::Up,
            4 => MapKey_t::Down,
            5 => MapKey_t::Left,
            6 => MapKey_t::Right,
            7 => MapKey_t::Max,
            value => MapKey_t::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum MapSource_t {
    Null,
    Openstreetmap,
    OpenstreetmapRenderer,
    Openaerialmap,
    MapsForFree,
    Opencyclemap,
    OsmPublicTransport,
    GoogleStreet,
    GoogleSatellite,
    GoogleHybrid,
    VirtualEarthStreet,
    VirtualEarthSatellite,
    VirtualEarthHybrid,
    OsmcTrails,
    Last,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for MapSource_t {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "MapSource_t::{}", match *self {
            MapSource_t::Null => "Null",
            MapSource_t::Openstreetmap => "Openstreetmap",
            MapSource_t::OpenstreetmapRenderer => "OpenstreetmapRenderer",
            MapSource_t::Openaerialmap => "Openaerialmap",
            MapSource_t::MapsForFree => "MapsForFree",
            MapSource_t::Opencyclemap => "Opencyclemap",
            MapSource_t::OsmPublicTransport => "OsmPublicTransport",
            MapSource_t::GoogleStreet => "GoogleStreet",
            MapSource_t::GoogleSatellite => "GoogleSatellite",
            MapSource_t::GoogleHybrid => "GoogleHybrid",
            MapSource_t::VirtualEarthStreet => "VirtualEarthStreet",
            MapSource_t::VirtualEarthSatellite => "VirtualEarthSatellite",
            MapSource_t::VirtualEarthHybrid => "VirtualEarthHybrid",
            MapSource_t::OsmcTrails => "OsmcTrails",
            MapSource_t::Last => "Last",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for MapSource_t {
    type GlibType = osm_gps_map_sys::OsmGpsMapSource_t;

    fn to_glib(&self) -> osm_gps_map_sys::OsmGpsMapSource_t {
        match *self {
            MapSource_t::Null => osm_gps_map_sys::OSM_GPS_MAP_SOURCE_NULL,
            MapSource_t::Openstreetmap => osm_gps_map_sys::OSM_GPS_MAP_SOURCE_OPENSTREETMAP,
            MapSource_t::OpenstreetmapRenderer => osm_gps_map_sys::OSM_GPS_MAP_SOURCE_OPENSTREETMAP_RENDERER,
            MapSource_t::Openaerialmap => osm_gps_map_sys::OSM_GPS_MAP_SOURCE_OPENAERIALMAP,
            MapSource_t::MapsForFree => osm_gps_map_sys::OSM_GPS_MAP_SOURCE_MAPS_FOR_FREE,
            MapSource_t::Opencyclemap => osm_gps_map_sys::OSM_GPS_MAP_SOURCE_OPENCYCLEMAP,
            MapSource_t::OsmPublicTransport => osm_gps_map_sys::OSM_GPS_MAP_SOURCE_OSM_PUBLIC_TRANSPORT,
            MapSource_t::GoogleStreet => osm_gps_map_sys::OSM_GPS_MAP_SOURCE_GOOGLE_STREET,
            MapSource_t::GoogleSatellite => osm_gps_map_sys::OSM_GPS_MAP_SOURCE_GOOGLE_SATELLITE,
            MapSource_t::GoogleHybrid => osm_gps_map_sys::OSM_GPS_MAP_SOURCE_GOOGLE_HYBRID,
            MapSource_t::VirtualEarthStreet => osm_gps_map_sys::OSM_GPS_MAP_SOURCE_VIRTUAL_EARTH_STREET,
            MapSource_t::VirtualEarthSatellite => osm_gps_map_sys::OSM_GPS_MAP_SOURCE_VIRTUAL_EARTH_SATELLITE,
            MapSource_t::VirtualEarthHybrid => osm_gps_map_sys::OSM_GPS_MAP_SOURCE_VIRTUAL_EARTH_HYBRID,
            MapSource_t::OsmcTrails => osm_gps_map_sys::OSM_GPS_MAP_SOURCE_OSMC_TRAILS,
            MapSource_t::Last => osm_gps_map_sys::OSM_GPS_MAP_SOURCE_LAST,
            MapSource_t::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<osm_gps_map_sys::OsmGpsMapSource_t> for MapSource_t {
    fn from_glib(value: osm_gps_map_sys::OsmGpsMapSource_t) -> Self {
        skip_assert_initialized!();
        match value {
            0 => MapSource_t::Null,
            1 => MapSource_t::Openstreetmap,
            2 => MapSource_t::OpenstreetmapRenderer,
            3 => MapSource_t::Openaerialmap,
            4 => MapSource_t::MapsForFree,
            5 => MapSource_t::Opencyclemap,
            6 => MapSource_t::OsmPublicTransport,
            7 => MapSource_t::GoogleStreet,
            8 => MapSource_t::GoogleSatellite,
            9 => MapSource_t::GoogleHybrid,
            10 => MapSource_t::VirtualEarthStreet,
            11 => MapSource_t::VirtualEarthSatellite,
            12 => MapSource_t::VirtualEarthHybrid,
            13 => MapSource_t::OsmcTrails,
            14 => MapSource_t::Last,
            value => MapSource_t::__Unknown(value),
        }
    }
}

