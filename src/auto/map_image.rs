// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::MapPoint;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::glib_wrapper! {
    pub struct MapImage(Object<ffi::OsmGpsMapImage, ffi::OsmGpsMapImageClass>);

    match fn {
        get_type => || ffi::osm_gps_map_image_get_type(),
    }
}

impl MapImage {
    pub fn new() -> MapImage {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osm_gps_map_image_new())
        }
    }
}

impl Default for MapImage {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_MAP_IMAGE: Option<&MapImage> = None;

pub trait MapImageExt: 'static {
    fn draw(&self, cr: &cairo::Context, rect: &mut gdk::Rectangle);

    fn get_point(&self) -> Option<MapPoint>;

    fn get_rotation(&self) -> f32;

    fn get_zorder(&self) -> i32;

    fn set_rotation(&self, rot: f32);

    fn get_property_pixbuf(&self) -> Option<gdk_pixbuf::Pixbuf>;

    fn set_property_pixbuf(&self, pixbuf: Option<&gdk_pixbuf::Pixbuf>);

    fn set_property_point(&self, point: Option<&MapPoint>);

    fn get_property_x_align(&self) -> f32;

    fn set_property_x_align(&self, x_align: f32);

    fn get_property_y_align(&self) -> f32;

    fn set_property_y_align(&self, y_align: f32);

    fn get_property_z_order(&self) -> i32;

    fn set_property_z_order(&self, z_order: i32);

    fn connect_property_pixbuf_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_point_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_rotation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_x_align_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_y_align_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_z_order_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<MapImage>> MapImageExt for O {
    fn draw(&self, cr: &cairo::Context, rect: &mut gdk::Rectangle) {
        unsafe {
            ffi::osm_gps_map_image_draw(self.as_ref().to_glib_none().0, mut_override(cr.to_glib_none().0), rect.to_glib_none_mut().0);
        }
    }

    fn get_point(&self) -> Option<MapPoint> {
        unsafe {
            from_glib_none(ffi::osm_gps_map_image_get_point(self.as_ref().to_glib_none().0))
        }
    }

    fn get_rotation(&self) -> f32 {
        unsafe {
            ffi::osm_gps_map_image_get_rotation(self.as_ref().to_glib_none().0)
        }
    }

    fn get_zorder(&self) -> i32 {
        unsafe {
            ffi::osm_gps_map_image_get_zorder(self.as_ref().to_glib_none().0)
        }
    }

    fn set_rotation(&self, rot: f32) {
        unsafe {
            ffi::osm_gps_map_image_set_rotation(self.as_ref().to_glib_none().0, rot);
        }
    }

    fn get_property_pixbuf(&self) -> Option<gdk_pixbuf::Pixbuf> {
        unsafe {
            let mut value = Value::from_type(<gdk_pixbuf::Pixbuf as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"pixbuf\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `pixbuf` getter")
        }
    }

    fn set_property_pixbuf(&self, pixbuf: Option<&gdk_pixbuf::Pixbuf>) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"pixbuf\0".as_ptr() as *const _, Value::from(pixbuf).to_glib_none().0);
        }
    }

    fn set_property_point(&self, point: Option<&MapPoint>) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"point\0".as_ptr() as *const _, Value::from(point).to_glib_none().0);
        }
    }

    fn get_property_x_align(&self) -> f32 {
        unsafe {
            let mut value = Value::from_type(<f32 as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"x-align\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `x-align` getter").unwrap()
        }
    }

    fn set_property_x_align(&self, x_align: f32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"x-align\0".as_ptr() as *const _, Value::from(&x_align).to_glib_none().0);
        }
    }

    fn get_property_y_align(&self) -> f32 {
        unsafe {
            let mut value = Value::from_type(<f32 as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"y-align\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `y-align` getter").unwrap()
        }
    }

    fn set_property_y_align(&self, y_align: f32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"y-align\0".as_ptr() as *const _, Value::from(&y_align).to_glib_none().0);
        }
    }

    fn get_property_z_order(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"z-order\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `z-order` getter").unwrap()
        }
    }

    fn set_property_z_order(&self, z_order: i32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"z-order\0".as_ptr() as *const _, Value::from(&z_order).to_glib_none().0);
        }
    }

    fn connect_property_pixbuf_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_pixbuf_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapImage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapImage>
        {
            let f: &F = &*(f as *const F);
            f(&MapImage::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::pixbuf\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_pixbuf_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_point_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_point_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapImage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapImage>
        {
            let f: &F = &*(f as *const F);
            f(&MapImage::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::point\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_point_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_rotation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_rotation_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapImage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapImage>
        {
            let f: &F = &*(f as *const F);
            f(&MapImage::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::rotation\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_rotation_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_x_align_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_x_align_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapImage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapImage>
        {
            let f: &F = &*(f as *const F);
            f(&MapImage::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::x-align\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_x_align_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_y_align_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_y_align_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapImage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapImage>
        {
            let f: &F = &*(f as *const F);
            f(&MapImage::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::y-align\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_y_align_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_z_order_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_z_order_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::OsmGpsMapImage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<MapImage>
        {
            let f: &F = &*(f as *const F);
            f(&MapImage::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::z-order\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_z_order_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for MapImage {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "MapImage")
    }
}
