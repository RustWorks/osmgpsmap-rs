// This file was generated by gir (https://github.com/gtk-rs/gir @ 5ec9961)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use MapPoint;
use cairo;
use ffi;
use gdk;
use gdk_pixbuf;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct MapImage(Object<ffi::OsmGpsMapImage, ffi::OsmGpsMapImageClass>);

    match fn {
        get_type => || ffi::osm_gps_map_image_get_type(),
    }
}

impl MapImage {
    pub fn new() -> MapImage {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osm_gps_map_image_new())
        }
    }
}

impl Default for MapImage {
    fn default() -> Self {
        Self::new()
    }
}

pub trait MapImageExt {
    fn draw(&self, cr: &mut cairo::Context, rect: &mut gdk::Rectangle);

    fn get_point(&self) -> Option<MapPoint>;

    fn get_rotation(&self) -> f32;

    fn get_zorder(&self) -> i32;

    fn set_rotation(&self, rot: f32);

    fn get_property_pixbuf(&self) -> Option<gdk_pixbuf::Pixbuf>;

    fn set_property_pixbuf(&self, pixbuf: Option<&gdk_pixbuf::Pixbuf>);

    fn set_property_point(&self, point: Option<&MapPoint>);

    fn get_property_x_align(&self) -> f32;

    fn set_property_x_align(&self, x_align: f32);

    fn get_property_y_align(&self) -> f32;

    fn set_property_y_align(&self, y_align: f32);

    fn get_property_z_order(&self) -> i32;

    fn set_property_z_order(&self, z_order: i32);

    fn connect_property_pixbuf_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_point_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_rotation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_x_align_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_y_align_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_z_order_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<MapImage> + IsA<glib::object::Object>> MapImageExt for O {
    fn draw(&self, cr: &mut cairo::Context, rect: &mut gdk::Rectangle) {
        unsafe {
            ffi::osm_gps_map_image_draw(self.to_glib_none().0, cr.to_glib_none_mut().0, rect.to_glib_none_mut().0);
        }
    }

    fn get_point(&self) -> Option<MapPoint> {
        unsafe {
            from_glib_none(ffi::osm_gps_map_image_get_point(self.to_glib_none().0))
        }
    }

    fn get_rotation(&self) -> f32 {
        unsafe {
            ffi::osm_gps_map_image_get_rotation(self.to_glib_none().0)
        }
    }

    fn get_zorder(&self) -> i32 {
        unsafe {
            ffi::osm_gps_map_image_get_zorder(self.to_glib_none().0)
        }
    }

    fn set_rotation(&self, rot: f32) {
        unsafe {
            ffi::osm_gps_map_image_set_rotation(self.to_glib_none().0, rot);
        }
    }

    fn get_property_pixbuf(&self) -> Option<gdk_pixbuf::Pixbuf> {
        unsafe {
            let mut value = Value::from_type(<gdk_pixbuf::Pixbuf as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "pixbuf".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_pixbuf(&self, pixbuf: Option<&gdk_pixbuf::Pixbuf>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "pixbuf".to_glib_none().0, Value::from(pixbuf).to_glib_none().0);
        }
    }

    fn set_property_point(&self, point: Option<&MapPoint>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "point".to_glib_none().0, Value::from(point).to_glib_none().0);
        }
    }

    fn get_property_x_align(&self) -> f32 {
        unsafe {
            let mut value = Value::from_type(<f32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "x-align".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_x_align(&self, x_align: f32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "x-align".to_glib_none().0, Value::from(&x_align).to_glib_none().0);
        }
    }

    fn get_property_y_align(&self) -> f32 {
        unsafe {
            let mut value = Value::from_type(<f32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "y-align".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_y_align(&self, y_align: f32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "y-align".to_glib_none().0, Value::from(&y_align).to_glib_none().0);
        }
    }

    fn get_property_z_order(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "z-order".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_z_order(&self, z_order: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "z-order".to_glib_none().0, Value::from(&z_order).to_glib_none().0);
        }
    }

    fn connect_property_pixbuf_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::pixbuf",
                transmute(notify_pixbuf_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_point_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::point",
                transmute(notify_point_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_rotation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::rotation",
                transmute(notify_rotation_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_x_align_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::x-align",
                transmute(notify_x_align_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_y_align_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::y-align",
                transmute(notify_y_align_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_z_order_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::z-order",
                transmute(notify_z_order_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_pixbuf_trampoline<P>(this: *mut ffi::OsmGpsMapImage, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapImage> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapImage::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_point_trampoline<P>(this: *mut ffi::OsmGpsMapImage, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapImage> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapImage::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_rotation_trampoline<P>(this: *mut ffi::OsmGpsMapImage, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapImage> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapImage::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_x_align_trampoline<P>(this: *mut ffi::OsmGpsMapImage, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapImage> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapImage::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_y_align_trampoline<P>(this: *mut ffi::OsmGpsMapImage, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapImage> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapImage::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_z_order_trampoline<P>(this: *mut ffi::OsmGpsMapImage, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<MapImage> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&MapImage::from_glib_borrow(this).downcast_unchecked())
}
