// This file was generated by gir (https://github.com/gtk-rs/gir @ 5ec9961)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct MapPoint(Boxed<ffi::OsmGpsMapPoint>);

    match fn {
        copy => |ptr| ffi::osm_gps_map_point_copy(mut_override(ptr)),
        free => |ptr| ffi::osm_gps_map_point_free(ptr),
        get_type => || ffi::osm_gps_map_point_get_type(),
    }
}

impl MapPoint {
    pub fn new_degrees(lat: f32, lon: f32) -> MapPoint {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osm_gps_map_point_new_degrees(lat, lon))
        }
    }

    pub fn new_radians(rlat: f32, rlon: f32) -> MapPoint {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osm_gps_map_point_new_radians(rlat, rlon))
        }
    }

    pub fn get_degrees(&mut self) -> (f32, f32) {
        unsafe {
            let mut lat = mem::uninitialized();
            let mut lon = mem::uninitialized();
            ffi::osm_gps_map_point_get_degrees(self.to_glib_none_mut().0, &mut lat, &mut lon);
            (lat, lon)
        }
    }

    pub fn get_radians(&mut self, rlat: *mut f32, rlon: *mut f32) {
        unsafe {
            ffi::osm_gps_map_point_get_radians(self.to_glib_none_mut().0, rlat, rlon);
        }
    }

    pub fn set_degrees(&mut self, lat: f32, lon: f32) {
        unsafe {
            ffi::osm_gps_map_point_set_degrees(self.to_glib_none_mut().0, lat, lon);
        }
    }

    pub fn set_radians(&mut self, rlat: f32, rlon: f32) {
        unsafe {
            ffi::osm_gps_map_point_set_radians(self.to_glib_none_mut().0, rlat, rlon);
        }
    }
}
